print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
mse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Untersuchung der Variable SaleCondition, bzw. SaleCondition = Partial
partial <- filter(test_sample, SaleCondition == "Partial")
mse(partial$SalePrice, partial$SalePrice_Prediction)
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:730],]
test_sample <- traindata_3[shuffle[731:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
mse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Untersuchung der Variable SaleCondition, bzw. SaleCondition = Partial
partial <- filter(test_sample, SaleCondition == "Partial")
mse(partial$SalePrice, partial$SalePrice_Prediction)
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:730],]
test_sample <- traindata_3[shuffle[731:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
mse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Untersuchung der Variable SaleCondition, bzw. SaleCondition = Partial
partial <- filter(test_sample, SaleCondition == "Partial")
mse(partial$SalePrice, partial$SalePrice_Prediction)
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:730],]
test_sample <- traindata_3[shuffle[731:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
mse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Untersuchung der Variable SaleCondition, bzw. SaleCondition = Partial
partial <- filter(test_sample, SaleCondition == "Partial")
mse(partial$SalePrice, partial$SalePrice_Prediction)
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:730],]
test_sample <- traindata_3[shuffle[731:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
mse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Untersuchung der Variable SaleCondition, bzw. SaleCondition = Partial
partial <- filter(test_sample, SaleCondition == "Partial")
mse(partial$SalePrice, partial$SalePrice_Prediction)
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:730],]
test_sample <- traindata_3[shuffle[731:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
mse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Untersuchung der Variable SaleCondition, bzw. SaleCondition = Partial
partial <- filter(test_sample, SaleCondition == "Partial")
mse(partial$SalePrice, partial$SalePrice_Prediction)
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:730],]
test_sample <- traindata_3[shuffle[731:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
mse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Untersuchung der Variable SaleCondition, bzw. SaleCondition = Partial
partial <- filter(test_sample, SaleCondition == "Partial")
mse(partial$SalePrice, partial$SalePrice_Prediction)
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:730],]
test_sample <- traindata_3[shuffle[731:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
mse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Untersuchung der Variable SaleCondition, bzw. SaleCondition = Partial
partial <- filter(test_sample, SaleCondition == "Partial")
mse(partial$SalePrice, partial$SalePrice_Prediction)
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:730],]
test_sample <- traindata_3[shuffle[731:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
mse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Untersuchung der Variable SaleCondition, bzw. SaleCondition = Partial
partial <- filter(test_sample, SaleCondition == "Partial")
mse(partial$SalePrice, partial$SalePrice_Prediction)
?mean
partial_all <- filter(traindata, SaleCondition == "Partial")
partial_all <- filter(traindata, SaleCondition == "Partial")
npartial_all <- filter(traindata, SaleCondition != "Partial")
mean(partial_all$SalePrice)
mean(npartial_all$SalePrice)
nabnorml_all <- filter(traindata, SaleCondition != "Abnorml")
abnorml_all <- filter(traindata, SaleCondition == "Abnorml")
abnorml_all <- filter(traindata, SaleCondition == "Abnorml")
nabnorml_all <- filter(traindata, SaleCondition != "Abnorml")
mean(abnorml_all$SalePrice)
mean(nabnorml_all$SalePrice)
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
mse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
setwd("~/Documents/GitHub/Kaggle_HousingPrices/03_Exploration")
?rmse
rmse_model <- function(data,model,label){
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
return(rmse(a$label, a$pred))
}
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
rmse_model(test_sample, linear_mod_pred, SalePrice)
rmse_model <- function(data,model,label){
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
return(rmse(a$pred, a$pred))
}
rmse_model(test_sample, linear_mod_pred, SalePrice)
rmse_model <- function(data,model,label){
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
return(rmse(a$'pred', a$pred))
}
rmse_model(test_sample, linear_mod_pred, SalePrice)
rmse_model <- function(data,model,label){
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
return(rmse(a$'label', a$pred))
}
rmse_model(test_sample, linear_mod_pred, SalePrice)
rmse_model <- function(data,model,label){
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
head(a)
return(rmse(a$'label', a$pred))
}
rmse_model(test_sample, linear_mod_pred, SalePrice)
rmse_model <- function(data,model,label){
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
print(a)
return(rmse(a$'label', a$pred))
}
rmse_model(test_sample, linear_mod_pred, SalePrice)
rmse_model <- function(data,model,label){
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
print(a$'label')
return(rmse(a$'label', a$pred))
}
rmse_model(test_sample, linear_mod_pred, SalePrice)
rmse_model <- function(data,model,label){
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
print(a$label)
return(rmse(a$'label', a$pred))
}
rmse_model(test_sample, linear_mod_pred, SalePrice)
t <- "SalePrice"
test_sample$t
a[,t]
test_sample[,t]
rmse_model <- function(data,model,label){
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
return(rmse(a[,label], a$pred))
}
rmse_model(test_sample, linear_mod_pred, SalePrice)
colnames(test_sample)
rmse_model(test_sample, linear_mod_pred, "SalePrice")
rmse_model <- function(data,model,label){
label <- as.character(label)
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
return(rmse(a[,label], a$pred))
}
rmse_model(test_sample, linear_mod_pred, "SalePrice")
rmse_model(test_sample, linear_mod_pred, SalePrice)
rmse_model <- function(data,model,label){
a <- data
a$pred <- predict(model, a)
a <- na.omit(a) #das sollte in Zukunft nicht mehr nötig sein und kann entfernt werden
return(rmse(a[,label], a$pred))
}
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
shuffle <- sample(1460)   #das hier ist mehr oder weniger Problematisch, da das samplen Einfluss auf die Signifkanz der Variablen hat
train_sample <- traindata_3[shuffle[1:1100],]
test_sample <- traindata_3[shuffle[1101:1460],]
linear_mod_pred <- lm(formula = SalePrice~., data=train_sample)
print(linear_mod_pred)
summary(linear_mod_pred)
test_sample$SalePrice_Prediction <- predict(linear_mod_pred, test_sample)
#Wenn kein Basement vorhanden ist, wird NA predicted, diese werden für die Berechnung des mse erstmal rausgenommen
#Man kann/sollte alternativ die NA's in BsmtQual ersetzen
test_sample <- na.omit(test_sample)
rmse(test_sample$SalePrice, test_sample$SalePrice_Prediction) #Die Fehler sind immer noch riesig, aber die geringsten die ich bis jetzt hatte :D
#Alternativ Funktion rmse_model benutzen
rmse_model(test_sample, linear_mod_pred, "SalePrice")
